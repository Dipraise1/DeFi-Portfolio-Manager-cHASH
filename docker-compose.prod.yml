version: '3.8'

services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:80
    depends_on:
      - redis
    networks:
      - defi-network
    # Removed direct port mapping for production as it will be accessed through the reverse proxy

  frontend:
    build:
      context: ./ClientApp
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      - api
    networks:
      - defi-network
    # Removed direct port mapping for production as it will be accessed through the reverse proxy

  redis:
    image: redis:alpine
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-strongpassword}
    restart: unless-stopped
    networks:
      - defi-network
    # Internal service, no ports exposed

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf:/etc/nginx/conf.d
      - ./nginx/certbot/conf:/etc/letsencrypt
      - ./nginx/certbot/www:/var/www/certbot
    depends_on:
      - api
      - frontend
    restart: unless-stopped
    networks:
      - defi-network

  certbot:
    image: certbot/certbot
    volumes:
      - ./nginx/certbot/conf:/etc/letsencrypt
      - ./nginx/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

networks:
  defi-network:
    driver: bridge

volumes:
  redis-data: 